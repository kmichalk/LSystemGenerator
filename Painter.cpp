#include "Painter.h"

#include "static_if.h"


void Painter::updateState() const {
	state.pen = pen();
	state.transform = transform();
}

///////////////////////////////////////////////////////////////////////////////////////////////

Painter::Painter():
	stateStack(DEFAULT_STATE_STACK_SIZE),
	state(),
	scale(1.0)
{
	//pushState();
}

///////////////////////////////////////////////////////////////////////////////////////////////

Painter::~Painter() {
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::scaledTranslate(QPoint const& p) {
	translate(p*scale);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::moveForward(param_t length) {
	//QPointF vec{0, scale*length};
	//translate(vec);
	//state.position += vec;
	translate(QPointF{0, scale*length});
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::drawLineForward(param_t length) {
	QPainter::drawLine(QPointF{0,0}, QPointF{0,scale*length});
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::drawLineForwardAndMove(param_t length) {
	QPointF end(0, scale*length);
	QPainter::drawLine(QPointF(0, 0), end);
	QPainter::translate(end);
	//state.position += end;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::setPenWidth(param_t width) {
	float w = pen().widthF();
	setPen(QPen{pen().brush(),width});
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::setColor(param_t r, param_t g, param_t b) {
	setPen(QPen(QBrush(QColor((int)r, (int)g, (int)b)), pen().widthF()));
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::rotateClockwise(param_t angle) {
	setTransform(QTransform{transform()}.rotate((qreal)-angle));
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::rotateAnticlockwise(param_t angle) {
	setTransform(QTransform{transform()}.rotate((qreal)angle));
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::drawCircle(param_t r) {
	param_t d = scale*2*r;
	drawEllipse(QPointF{0, 0}, d, d);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::drawSquare(param_t a) {
	param_t half = a/2.0f;
	QPainter::drawRect(-half, -half, a, a);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::drawRect(param_t a, param_t b) {
	QPainter::drawRect(-a/2.0f, -b/2.0f, a, b);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::_translate(param_t x, param_t y) {
	QPainter::translate(x, y);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::setPosition(param_t x, param_t y) {
	//TODO todo
	//setTransform(transform().tr)
}

///////////////////////////////////////////////////////////////////////////////////////////////

Painter::State const& Painter::getState() const {
	updateState();
	return state;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::restoreState(State const & state) {
	setTransform(state.transform);
	setPen(state.pen);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::setScale(float scale) {
	this->scale = scale;
}

///////////////////////////////////////////////////////////////////////////////////////////////

float Painter::getScale() const {
	return scale;
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::pushState() {
	//std::cout<<"push: " << stateStack.size()<<std::endl;
	updateState();
	stateStack.push_back(state);
}

///////////////////////////////////////////////////////////////////////////////////////////////

void Painter::popState() {
	//std::cout<<"pop: " << stateStack.size()<<std::endl;
	restoreState(stateStack.take());
}

///////////////////////////////////////////////////////////////////////////////////////////////

const QColor Painter::DEFAULT_COLOR = QColor{150,150,150};